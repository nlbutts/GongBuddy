// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gb_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gb_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gb_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gb_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gb_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gb_5fmessages_2eproto;
class IMUSample;
class IMUSampleDefaultTypeInternal;
extern IMUSampleDefaultTypeInternal _IMUSample_default_instance_;
class LoraMsg;
class LoraMsgDefaultTypeInternal;
extern LoraMsgDefaultTypeInternal _LoraMsg_default_instance_;
class Reprogramming;
class ReprogrammingDefaultTypeInternal;
extern ReprogrammingDefaultTypeInternal _Reprogramming_default_instance_;
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::IMUSample* Arena::CreateMaybeMessage<::IMUSample>(Arena*);
template<> ::LoraMsg* Arena::CreateMaybeMessage<::LoraMsg>(Arena*);
template<> ::Reprogramming* Arena::CreateMaybeMessage<::Reprogramming>(Arena*);
template<> ::Sensor* Arena::CreateMaybeMessage<::Sensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Reprogramming_Flags : int {
  Reprogramming_Flags_LAST_PACKET = 0,
  Reprogramming_Flags_CONTINUE = 1
};
bool Reprogramming_Flags_IsValid(int value);
constexpr Reprogramming_Flags Reprogramming_Flags_Flags_MIN = Reprogramming_Flags_LAST_PACKET;
constexpr Reprogramming_Flags Reprogramming_Flags_Flags_MAX = Reprogramming_Flags_CONTINUE;
constexpr int Reprogramming_Flags_Flags_ARRAYSIZE = Reprogramming_Flags_Flags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reprogramming_Flags_descriptor();
template<typename T>
inline const std::string& Reprogramming_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reprogramming_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reprogramming_Flags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reprogramming_Flags_descriptor(), enum_t_value);
}
inline bool Reprogramming_Flags_Parse(
    const std::string& name, Reprogramming_Flags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reprogramming_Flags>(
    Reprogramming_Flags_descriptor(), name, value);
}
// ===================================================================

class Sensor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sensor) */ {
 public:
  inline Sensor() : Sensor(nullptr) {};
  virtual ~Sensor();

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(nullptr);
  }

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sensor";
  }
  protected:
  explicit Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb_5fmessages_2eproto);
    return ::descriptor_table_gb_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required sint32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Sensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  friend struct ::TableStruct_gb_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class IMUSample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IMUSample) */ {
 public:
  inline IMUSample() : IMUSample(nullptr) {};
  virtual ~IMUSample();

  IMUSample(const IMUSample& from);
  IMUSample(IMUSample&& from) noexcept
    : IMUSample() {
    *this = ::std::move(from);
  }

  inline IMUSample& operator=(const IMUSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUSample& operator=(IMUSample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSample* internal_default_instance() {
    return reinterpret_cast<const IMUSample*>(
               &_IMUSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMUSample& a, IMUSample& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUSample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUSample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUSample* New() const final {
    return CreateMaybeMessage<IMUSample>(nullptr);
  }

  IMUSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUSample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUSample& from);
  void MergeFrom(const IMUSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IMUSample";
  }
  protected:
  explicit IMUSample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb_5fmessages_2eproto);
    return ::descriptor_table_gb_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelFieldNumber = 1,
    kGyroFieldNumber = 2,
    kPressureFieldNumber = 3,
    kTemperatureFieldNumber = 4,
  };
  // required .Sensor accel = 1;
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  const ::Sensor& accel() const;
  ::Sensor* release_accel();
  ::Sensor* mutable_accel();
  void set_allocated_accel(::Sensor* accel);
  private:
  const ::Sensor& _internal_accel() const;
  ::Sensor* _internal_mutable_accel();
  public:
  void unsafe_arena_set_allocated_accel(
      ::Sensor* accel);
  ::Sensor* unsafe_arena_release_accel();

  // required .Sensor gyro = 2;
  bool has_gyro() const;
  private:
  bool _internal_has_gyro() const;
  public:
  void clear_gyro();
  const ::Sensor& gyro() const;
  ::Sensor* release_gyro();
  ::Sensor* mutable_gyro();
  void set_allocated_gyro(::Sensor* gyro);
  private:
  const ::Sensor& _internal_gyro() const;
  ::Sensor* _internal_mutable_gyro();
  public:
  void unsafe_arena_set_allocated_gyro(
      ::Sensor* gyro);
  ::Sensor* unsafe_arena_release_gyro();

  // required sint32 pressure = 3;
  bool has_pressure() const;
  private:
  bool _internal_has_pressure() const;
  public:
  void clear_pressure();
  ::PROTOBUF_NAMESPACE_ID::int32 pressure() const;
  void set_pressure(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pressure() const;
  void _internal_set_pressure(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 temperature = 4;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 temperature() const;
  void set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temperature() const;
  void _internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IMUSample)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Sensor* accel_;
  ::Sensor* gyro_;
  ::PROTOBUF_NAMESPACE_ID::int32 pressure_;
  ::PROTOBUF_NAMESPACE_ID::int32 temperature_;
  friend struct ::TableStruct_gb_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class LoraMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoraMsg) */ {
 public:
  inline LoraMsg() : LoraMsg(nullptr) {};
  virtual ~LoraMsg();

  LoraMsg(const LoraMsg& from);
  LoraMsg(LoraMsg&& from) noexcept
    : LoraMsg() {
    *this = ::std::move(from);
  }

  inline LoraMsg& operator=(const LoraMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoraMsg& operator=(LoraMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoraMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoraMsg* internal_default_instance() {
    return reinterpret_cast<const LoraMsg*>(
               &_LoraMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoraMsg& a, LoraMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LoraMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoraMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoraMsg* New() const final {
    return CreateMaybeMessage<LoraMsg>(nullptr);
  }

  LoraMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoraMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoraMsg& from);
  void MergeFrom(const LoraMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoraMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoraMsg";
  }
  protected:
  explicit LoraMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb_5fmessages_2eproto);
    return ::descriptor_table_gb_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 3,
    kBuildnumFieldNumber = 1,
    kStatusFieldNumber = 2,
    kBattVoltageFieldNumber = 4,
    kThresholdFieldNumber = 5,
    kConfigurationFieldNumber = 6,
  };
  // repeated .IMUSample imu = 3;
  int imu_size() const;
  private:
  int _internal_imu_size() const;
  public:
  void clear_imu();
  ::IMUSample* mutable_imu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IMUSample >*
      mutable_imu();
  private:
  const ::IMUSample& _internal_imu(int index) const;
  ::IMUSample* _internal_add_imu();
  public:
  const ::IMUSample& imu(int index) const;
  ::IMUSample* add_imu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IMUSample >&
      imu() const;

  // required uint32 buildnum = 1;
  bool has_buildnum() const;
  private:
  bool _internal_has_buildnum() const;
  public:
  void clear_buildnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 buildnum() const;
  void set_buildnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buildnum() const;
  void _internal_set_buildnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 batt_voltage = 4;
  bool has_batt_voltage() const;
  private:
  bool _internal_has_batt_voltage() const;
  public:
  void clear_batt_voltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 batt_voltage() const;
  void set_batt_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batt_voltage() const;
  void _internal_set_batt_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 threshold = 5;
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 configuration = 6;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  ::PROTOBUF_NAMESPACE_ID::uint32 configuration() const;
  void set_configuration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_configuration() const;
  void _internal_set_configuration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoraMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IMUSample > imu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buildnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batt_voltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 configuration_;
  friend struct ::TableStruct_gb_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class Reprogramming PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Reprogramming) */ {
 public:
  inline Reprogramming() : Reprogramming(nullptr) {};
  virtual ~Reprogramming();

  Reprogramming(const Reprogramming& from);
  Reprogramming(Reprogramming&& from) noexcept
    : Reprogramming() {
    *this = ::std::move(from);
  }

  inline Reprogramming& operator=(const Reprogramming& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reprogramming& operator=(Reprogramming&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reprogramming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reprogramming* internal_default_instance() {
    return reinterpret_cast<const Reprogramming*>(
               &_Reprogramming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Reprogramming& a, Reprogramming& b) {
    a.Swap(&b);
  }
  inline void Swap(Reprogramming* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reprogramming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reprogramming* New() const final {
    return CreateMaybeMessage<Reprogramming>(nullptr);
  }

  Reprogramming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reprogramming>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reprogramming& from);
  void MergeFrom(const Reprogramming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reprogramming* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Reprogramming";
  }
  protected:
  explicit Reprogramming(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb_5fmessages_2eproto);
    return ::descriptor_table_gb_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reprogramming_Flags Flags;
  static constexpr Flags LAST_PACKET =
    Reprogramming_Flags_LAST_PACKET;
  static constexpr Flags CONTINUE =
    Reprogramming_Flags_CONTINUE;
  static inline bool Flags_IsValid(int value) {
    return Reprogramming_Flags_IsValid(value);
  }
  static constexpr Flags Flags_MIN =
    Reprogramming_Flags_Flags_MIN;
  static constexpr Flags Flags_MAX =
    Reprogramming_Flags_Flags_MAX;
  static constexpr int Flags_ARRAYSIZE =
    Reprogramming_Flags_Flags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flags_descriptor() {
    return Reprogramming_Flags_descriptor();
  }
  template<typename T>
  static inline const std::string& Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flags_Name.");
    return Reprogramming_Flags_Name(enum_t_value);
  }
  static inline bool Flags_Parse(const std::string& name,
      Flags* value) {
    return Reprogramming_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kAddressFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // required bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required uint32 address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .Reprogramming.Flags flags = 3 [default = CONTINUE];
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::Reprogramming_Flags flags() const;
  void set_flags(::Reprogramming_Flags value);
  private:
  ::Reprogramming_Flags _internal_flags() const;
  void _internal_set_flags(::Reprogramming_Flags value);
  public:

  // @@protoc_insertion_point(class_scope:Reprogramming)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  int flags_;
  friend struct ::TableStruct_gb_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sensor

// required sint32 x = 1;
inline bool Sensor::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sensor::has_x() const {
  return _internal_has_x();
}
inline void Sensor::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::x() const {
  // @@protoc_insertion_point(field_get:Sensor.x)
  return _internal_x();
}
inline void Sensor::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Sensor::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Sensor.x)
}

// required sint32 y = 2;
inline bool Sensor::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sensor::has_y() const {
  return _internal_has_y();
}
inline void Sensor::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::y() const {
  // @@protoc_insertion_point(field_get:Sensor.y)
  return _internal_y();
}
inline void Sensor::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Sensor::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Sensor.y)
}

// required sint32 z = 3;
inline bool Sensor::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sensor::has_z() const {
  return _internal_has_z();
}
inline void Sensor::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::z() const {
  // @@protoc_insertion_point(field_get:Sensor.z)
  return _internal_z();
}
inline void Sensor::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Sensor::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Sensor.z)
}

// -------------------------------------------------------------------

// IMUSample

// required .Sensor accel = 1;
inline bool IMUSample::_internal_has_accel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || accel_ != nullptr);
  return value;
}
inline bool IMUSample::has_accel() const {
  return _internal_has_accel();
}
inline void IMUSample::clear_accel() {
  if (accel_ != nullptr) accel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Sensor& IMUSample::_internal_accel() const {
  const ::Sensor* p = accel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Sensor*>(
      &::_Sensor_default_instance_);
}
inline const ::Sensor& IMUSample::accel() const {
  // @@protoc_insertion_point(field_get:IMUSample.accel)
  return _internal_accel();
}
inline void IMUSample::unsafe_arena_set_allocated_accel(
    ::Sensor* accel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_);
  }
  accel_ = accel;
  if (accel) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IMUSample.accel)
}
inline ::Sensor* IMUSample::release_accel() {
  auto temp = unsafe_arena_release_accel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Sensor* IMUSample::unsafe_arena_release_accel() {
  // @@protoc_insertion_point(field_release:IMUSample.accel)
  _has_bits_[0] &= ~0x00000001u;
  ::Sensor* temp = accel_;
  accel_ = nullptr;
  return temp;
}
inline ::Sensor* IMUSample::_internal_mutable_accel() {
  _has_bits_[0] |= 0x00000001u;
  if (accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Sensor>(GetArena());
    accel_ = p;
  }
  return accel_;
}
inline ::Sensor* IMUSample::mutable_accel() {
  // @@protoc_insertion_point(field_mutable:IMUSample.accel)
  return _internal_mutable_accel();
}
inline void IMUSample::set_allocated_accel(::Sensor* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accel_;
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accel);
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:IMUSample.accel)
}

// required .Sensor gyro = 2;
inline bool IMUSample::_internal_has_gyro() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gyro_ != nullptr);
  return value;
}
inline bool IMUSample::has_gyro() const {
  return _internal_has_gyro();
}
inline void IMUSample::clear_gyro() {
  if (gyro_ != nullptr) gyro_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Sensor& IMUSample::_internal_gyro() const {
  const ::Sensor* p = gyro_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Sensor*>(
      &::_Sensor_default_instance_);
}
inline const ::Sensor& IMUSample::gyro() const {
  // @@protoc_insertion_point(field_get:IMUSample.gyro)
  return _internal_gyro();
}
inline void IMUSample::unsafe_arena_set_allocated_gyro(
    ::Sensor* gyro) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro_);
  }
  gyro_ = gyro;
  if (gyro) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IMUSample.gyro)
}
inline ::Sensor* IMUSample::release_gyro() {
  auto temp = unsafe_arena_release_gyro();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Sensor* IMUSample::unsafe_arena_release_gyro() {
  // @@protoc_insertion_point(field_release:IMUSample.gyro)
  _has_bits_[0] &= ~0x00000002u;
  ::Sensor* temp = gyro_;
  gyro_ = nullptr;
  return temp;
}
inline ::Sensor* IMUSample::_internal_mutable_gyro() {
  _has_bits_[0] |= 0x00000002u;
  if (gyro_ == nullptr) {
    auto* p = CreateMaybeMessage<::Sensor>(GetArena());
    gyro_ = p;
  }
  return gyro_;
}
inline ::Sensor* IMUSample::mutable_gyro() {
  // @@protoc_insertion_point(field_mutable:IMUSample.gyro)
  return _internal_mutable_gyro();
}
inline void IMUSample::set_allocated_gyro(::Sensor* gyro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gyro_;
  }
  if (gyro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gyro);
    if (message_arena != submessage_arena) {
      gyro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gyro_ = gyro;
  // @@protoc_insertion_point(field_set_allocated:IMUSample.gyro)
}

// required sint32 pressure = 3;
inline bool IMUSample::_internal_has_pressure() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IMUSample::has_pressure() const {
  return _internal_has_pressure();
}
inline void IMUSample::clear_pressure() {
  pressure_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IMUSample::_internal_pressure() const {
  return pressure_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IMUSample::pressure() const {
  // @@protoc_insertion_point(field_get:IMUSample.pressure)
  return _internal_pressure();
}
inline void IMUSample::_internal_set_pressure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pressure_ = value;
}
inline void IMUSample::set_pressure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:IMUSample.pressure)
}

// required sint32 temperature = 4;
inline bool IMUSample::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IMUSample::has_temperature() const {
  return _internal_has_temperature();
}
inline void IMUSample::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IMUSample::_internal_temperature() const {
  return temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IMUSample::temperature() const {
  // @@protoc_insertion_point(field_get:IMUSample.temperature)
  return _internal_temperature();
}
inline void IMUSample::_internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  temperature_ = value;
}
inline void IMUSample::set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:IMUSample.temperature)
}

// -------------------------------------------------------------------

// LoraMsg

// required uint32 buildnum = 1;
inline bool LoraMsg::_internal_has_buildnum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoraMsg::has_buildnum() const {
  return _internal_has_buildnum();
}
inline void LoraMsg::clear_buildnum() {
  buildnum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::_internal_buildnum() const {
  return buildnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::buildnum() const {
  // @@protoc_insertion_point(field_get:LoraMsg.buildnum)
  return _internal_buildnum();
}
inline void LoraMsg::_internal_set_buildnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  buildnum_ = value;
}
inline void LoraMsg::set_buildnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buildnum(value);
  // @@protoc_insertion_point(field_set:LoraMsg.buildnum)
}

// optional uint32 status = 2;
inline bool LoraMsg::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoraMsg::has_status() const {
  return _internal_has_status();
}
inline void LoraMsg::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::status() const {
  // @@protoc_insertion_point(field_get:LoraMsg.status)
  return _internal_status();
}
inline void LoraMsg::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void LoraMsg::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LoraMsg.status)
}

// repeated .IMUSample imu = 3;
inline int LoraMsg::_internal_imu_size() const {
  return imu_.size();
}
inline int LoraMsg::imu_size() const {
  return _internal_imu_size();
}
inline void LoraMsg::clear_imu() {
  imu_.Clear();
}
inline ::IMUSample* LoraMsg::mutable_imu(int index) {
  // @@protoc_insertion_point(field_mutable:LoraMsg.imu)
  return imu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IMUSample >*
LoraMsg::mutable_imu() {
  // @@protoc_insertion_point(field_mutable_list:LoraMsg.imu)
  return &imu_;
}
inline const ::IMUSample& LoraMsg::_internal_imu(int index) const {
  return imu_.Get(index);
}
inline const ::IMUSample& LoraMsg::imu(int index) const {
  // @@protoc_insertion_point(field_get:LoraMsg.imu)
  return _internal_imu(index);
}
inline ::IMUSample* LoraMsg::_internal_add_imu() {
  return imu_.Add();
}
inline ::IMUSample* LoraMsg::add_imu() {
  // @@protoc_insertion_point(field_add:LoraMsg.imu)
  return _internal_add_imu();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IMUSample >&
LoraMsg::imu() const {
  // @@protoc_insertion_point(field_list:LoraMsg.imu)
  return imu_;
}

// optional uint32 batt_voltage = 4;
inline bool LoraMsg::_internal_has_batt_voltage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoraMsg::has_batt_voltage() const {
  return _internal_has_batt_voltage();
}
inline void LoraMsg::clear_batt_voltage() {
  batt_voltage_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::_internal_batt_voltage() const {
  return batt_voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::batt_voltage() const {
  // @@protoc_insertion_point(field_get:LoraMsg.batt_voltage)
  return _internal_batt_voltage();
}
inline void LoraMsg::_internal_set_batt_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  batt_voltage_ = value;
}
inline void LoraMsg::set_batt_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batt_voltage(value);
  // @@protoc_insertion_point(field_set:LoraMsg.batt_voltage)
}

// optional uint32 threshold = 5;
inline bool LoraMsg::_internal_has_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoraMsg::has_threshold() const {
  return _internal_has_threshold();
}
inline void LoraMsg::clear_threshold() {
  threshold_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::threshold() const {
  // @@protoc_insertion_point(field_get:LoraMsg.threshold)
  return _internal_threshold();
}
inline void LoraMsg::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  threshold_ = value;
}
inline void LoraMsg::set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:LoraMsg.threshold)
}

// optional uint32 configuration = 6;
inline bool LoraMsg::_internal_has_configuration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoraMsg::has_configuration() const {
  return _internal_has_configuration();
}
inline void LoraMsg::clear_configuration() {
  configuration_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::_internal_configuration() const {
  return configuration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraMsg::configuration() const {
  // @@protoc_insertion_point(field_get:LoraMsg.configuration)
  return _internal_configuration();
}
inline void LoraMsg::_internal_set_configuration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  configuration_ = value;
}
inline void LoraMsg::set_configuration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_configuration(value);
  // @@protoc_insertion_point(field_set:LoraMsg.configuration)
}

// -------------------------------------------------------------------

// Reprogramming

// required uint32 address = 1;
inline bool Reprogramming::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Reprogramming::has_address() const {
  return _internal_has_address();
}
inline void Reprogramming::clear_address() {
  address_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Reprogramming::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Reprogramming::address() const {
  // @@protoc_insertion_point(field_get:Reprogramming.address)
  return _internal_address();
}
inline void Reprogramming::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  address_ = value;
}
inline void Reprogramming::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:Reprogramming.address)
}

// required bytes data = 2;
inline bool Reprogramming::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reprogramming::has_data() const {
  return _internal_has_data();
}
inline void Reprogramming::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Reprogramming::data() const {
  // @@protoc_insertion_point(field_get:Reprogramming.data)
  return _internal_data();
}
inline void Reprogramming::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Reprogramming.data)
}
inline std::string* Reprogramming::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Reprogramming.data)
  return _internal_mutable_data();
}
inline const std::string& Reprogramming::_internal_data() const {
  return data_.Get();
}
inline void Reprogramming::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Reprogramming::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Reprogramming.data)
}
inline void Reprogramming::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Reprogramming.data)
}
inline void Reprogramming::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Reprogramming.data)
}
inline std::string* Reprogramming::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Reprogramming::release_data() {
  // @@protoc_insertion_point(field_release:Reprogramming.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reprogramming::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Reprogramming.data)
}
inline std::string* Reprogramming::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Reprogramming.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Reprogramming::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Reprogramming.data)
}

// required .Reprogramming.Flags flags = 3 [default = CONTINUE];
inline bool Reprogramming::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reprogramming::has_flags() const {
  return _internal_has_flags();
}
inline void Reprogramming::clear_flags() {
  flags_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Reprogramming_Flags Reprogramming::_internal_flags() const {
  return static_cast< ::Reprogramming_Flags >(flags_);
}
inline ::Reprogramming_Flags Reprogramming::flags() const {
  // @@protoc_insertion_point(field_get:Reprogramming.flags)
  return _internal_flags();
}
inline void Reprogramming::_internal_set_flags(::Reprogramming_Flags value) {
  assert(::Reprogramming_Flags_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
}
inline void Reprogramming::set_flags(::Reprogramming_Flags value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Reprogramming.flags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Reprogramming_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Reprogramming_Flags>() {
  return ::Reprogramming_Flags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gb_5fmessages_2eproto
